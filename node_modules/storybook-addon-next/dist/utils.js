"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addScopedAlias = exports.resolveNextConfig = exports.getNextjsVersion = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const constants_1 = require("next/constants");
const getNextjsVersion = () => 
// eslint-disable-next-line @typescript-eslint/no-var-requires
require(path_1.default.resolve('node_modules/next/package.json')).version;
exports.getNextjsVersion = getNextjsVersion;
const resolveNextConfig = (baseConfig) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
    const nextConfigExport = yield Promise.resolve().then(() => (0, tslib_1.__importStar)(require(path_1.default.resolve('next.config.js'))));
    return typeof nextConfigExport === 'function'
        ? nextConfigExport(constants_1.PHASE_DEVELOPMENT_SERVER, { defaultConfig: baseConfig })
        : nextConfigExport;
});
exports.resolveNextConfig = resolveNextConfig;
// This is to help the addon in development
// Without it, the addon resolves packages in its node_modules instead of the example's node_modules
const addScopedAlias = (baseConfig, name, alias) => {
    if (!baseConfig.resolve)
        baseConfig.resolve = {};
    if (!baseConfig.resolve.alias)
        baseConfig.resolve.alias = {};
    const aliasConfig = baseConfig.resolve.alias;
    const scopedAlias = path_1.default.resolve(`node_modules/${alias !== null && alias !== void 0 ? alias : name}`);
    if (Array.isArray(aliasConfig)) {
        aliasConfig.push({
            name,
            alias: scopedAlias
        });
    }
    else {
        aliasConfig[name] = scopedAlias;
    }
};
exports.addScopedAlias = addScopedAlias;
